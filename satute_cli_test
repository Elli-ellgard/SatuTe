import unittest
import subprocess
import logging
import os

import unittest
import subprocess
import logging
import os

# Configure the logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SatuteCLITestCase(unittest.TestCase):
    def test_satute_cli_with_tree(self):
        try:
            logger.info("Starting to test Satute CLI with a tree file.")
            command = ["python3", "satute_cli.py", "-dir", "test/octo-kraken-tree-test/example.phy.treefile", "-iqtree", "./iqtree/bin/iqtree"]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()
            # Test whether the execution was successful
            self.assertEqual(process.returncode, 0)
            logger.info("Satute CLI executed successfully with a tree file.")
        except Exception as e:
            # logger.info(stderr)
            logger.error("An error occurred while testing Satute CLI with a tree file: " + str(e))

    def test_satute_cli_with_tree_and_model(self):
        try:
            logger.info("Starting to test Satute CLI with a tree file.")
            command = ["python3", "satute_cli.py", "-dir", "test/octo-kraken-tree-test/example.phy.treefile", "-iqtree", "./iqtree/bin/iqtree", "-m", "GTR"]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()
            # Test whether the execution was successful
            self.assertEqual(process.returncode, 0)
            logger.info("Satute CLI executed successfully with a tree file.")

        except Exception as e:
            # logger.info(stderr)
            logger.error("An error occurred while testing Satute CLI with a tree file: " + str(e))


        # Further tests can be done by opening the output file and checking its contents.
        # For instance, checking if the file contains a specific line, word or if the format of the output file is correct. 
    def test_satute_cli_with_alignment(self):
        try:
            logger.info("Starting to test Satute CLI with an alignment file.")
            command = ["python3", "satute_cli.py", "-dir", "test/octo-kraken-msa-test/example.phy", "-iqtree", "./iqtree/bin/iqtree"]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()
            # Test whether the execution was successful
            self.assertEqual(process.returncode, 0)
            logger.info("Satute CLI executed successfully with an alignment file.")
        except Exception as e:
            # logger.info(stderr)
            logger.error("An error occurred while testing Satute CLI with an alignment file: " + str(e))

        # Further tests can be done by opening the output file and checking its contents.
        # For instance, checking if the file contains a specific line, word or if the format of the output file is correct.

if __name__ == '__main__':
    unittest.main()
